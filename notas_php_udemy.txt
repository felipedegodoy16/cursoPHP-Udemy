o PHP é dividido em duas vertentes:
- Programação Backend: criação de sites dinêmicos, conexão e interação com banco de dados, geração de gráficos, documentos de XML e PDF
- Scripts de linha de comando: rodar scripts para que ações sejam executadas no computador ou remotamente, administração de sistema ou até mesmo CRONs (rotinas que rodam em paralelo sem precisar que nós executemos)

- É uma linguagem de programação que foi desenvolvida para deixar o HTML dinâmico
- Linguagem de script e open source
- Foco em desenvolvimento web
- Seus programas são executadas em server side (backend)
- PHP significa: Personal Home Page (P) e Hypertext Preprocessor (HP)

o PHP interpreta todo o bloco de código que estiver entre as tags de PHP
- a abertura é <?php
- e o fechamento é ?>
- cada linha de código termina com ;
- todo o código dentro destas tags será executado pelo PHP, e após isso será impresso na tela

//////////////////////////////////////////////////////////////////////////////////////////////////

Funções que vem com o PHP
- phpinfo() -> mostra as dependências do PHP que estão instaladas na máquina, mostra basicamente todas as informações sobre o PHP
- is_int() -> verificar se o dado é do tipo inteiro, o retorno é um booleano
- is_float() -> verificar se o dado é do tipo float, o retorno é um booleano
- is_string() -> verificar se o dado é do tipo string, o retorno é um booleano
- is_bool() -> verificar se o dado é do tipo booleano, o retorno é um booleano
- is_null() -> verificar se o dado é NULL, o retorno é um booleano
- gettype() -> retorna o tipo de dado de algo

//////////////////////////////////////////////////////////////////////////////////////////////////

PHP é case sensitive para variáveis, mas, para instruções não
- echo = ECHO
- $nome != $NOME

- espaço em branco no PHP é ignorado

//////////////////////////////////////////////////////////////////////////////////////////////////

Palavras reservadas
- Exemplos: echo, insteadof, else, interface, protected, require, and, public, __DIR__, __FILE__, endif, print, private, namespace, pow, as, break, case, for, finally, switch, throw...

//////////////////////////////////////////////////////////////////////////////////////////////////

Tipos de dados

- Inteiros
-- são os números que não possuem vírgula
-- podem ser negativos também
-- para validar se um número é inteiro usamos a função is_int()

- Float
-- são os números que possuem vírgula
-- podem ser negativos também
-- para validar se é um float usamos a função is_float()

- String
-- é possível escrever textos com aspas simples ou duplas
-- as aspas duplas interpretam variáveis as simples não
-- para validar se é uma string usamos a função is_string()

- Boolean
-- é um tipo de dado que possui dois valores (true or false)
-- alguns valores são considerados falsos: 0, 0.0, "0", [], NULL
-- booleano é usado para fazer validações
-- para verificar se é um booleano é usado a função is_bool()

- Array
-- serve para agrupar um conjunto de valores
-- é possível inserir qualquer tipo de dado dentro do array
-- é definido com os valores dentro de colchetes [] e seus dados separdos por vígula , EX: [1, 2, 3, 4]
-- todos os valores de um array possuem um índice, começando sempre do 0

- Array Associativo
-- é basicamente um array que possui uma chave e um valor
-- a estrutura é igual mas será construído dessa maneira: $arr = ['nome' => 'Felipe', 'idade' => 19] chave entre aspas, seta para apontar o valor e o valor

- Objetos
-- no PHP é possível criar classes e objetos
-- o objeto possui métodos que são suas ações e propriedades que são suas características

- NULL
-- esse tipo de dado tem apenas um valor, NULL
-- um uso para esse tipo de dado é verificar se uma variável está ou não vazia
-- podemos verificar se um valor é NULL com a função is_null()

//////////////////////////////////////////////////////////////////////////////////////////////////

Variáveis
- salvar um valor na memória
- em PHP as variáveis começam com $
- variáveis de variáveis, usando $$ você cria uma variável a partir de outra com o nome do valor dessa variável
- variável por referência "ponteiro" utiliza o símbolo =& se alterar o valor da uma altera o valor da outra também

------------------------------------

- Escopo da Variável

-- local: variável declarada em uma função
--- seu escopo é definido dentro da função
--- não é acessível fora da mesma
--- o seu valor é sempre resetado quando a função é finalizada 
--- cada função poderá mexer com a mesma variável, porém, seu escopo será dentro da função, ou seja, quando a função acabar a variável voltará para seu valor global

-- global: variáveos declaradas fora de funções
--- é declarada fora de funções
--- não são acessíveis dentro de funções
--- é necessário utilizar a palavra global para conseguir utilizar a variável dentro de outra função, porém, utilizando dessa forma, se o valor for alterado localmente ele será alterado globalmente também, essa instrução global deve ser usada dentro da função que quero utilizar a variável

-- static: variável declarada dentro da função, porém o seu valor permanece salvo entre chamadas da função
--- declarada com a instrução static
--- o valor da mesma é mantido e alterado a cada execução de uma função
--- é interessante esse comportamente pois as variáveis de escopo local sempre são resetadas, mas nesse caso não, nesse caso o valor persiste

-- parâmetros da função: variáveis passadas para uma função, podendo ser utilizadas ao da mesma
--- este recurso ajuda a criar funções com valores dinâmicos, podendo ser alterado a cada vez que a função é chamada
--- é possível passar mais de um parâmetro para a função

//////////////////////////////////////////////////////////////////////////////////////////////////

Expressões e Operadores
- o PHP em certas operações muda o tipo de dado de uma variável
- soma: +
- subtração: -
- divisão: /
- multiplicação: *
- por exemplo 5/2 = 2.5 (gera um float)
- 5 . 5 resulta em 55 (gera uma string, o . é para concatenação)
- sempre tomar cuidado com as expressões, pois, às vezes podem gerar resultados indesejados
- este recurso é chamado de auto cast (mudar de forma implícita o tipo da variável)
- % usado para retornar o resto de uma divisão
- ** operador de exponenciação
- . operador de concatenação
- ++ auto incremento e -- auto decremento

- Operadores de comparação
-- igualdade: == -> apenas valor é levado em consideração
-- idêntico a: === -> tipo também é levado em consideração
-- diferença: != -> apenas valor é levado em consideração
-- não idêntico a: !== -> tipo também é levado em consideração
-- maior e maior ou igual a: > e >=
-- menor e menor ou igual a: < e <=

- Operadores lógicos
-- operador AND: && -> verdade quando os dois lados forem verdadeiros
-- operador OR: || -> verdade quando pelo menos um dos lados forem verdadeiros (barra vertical ou pipe)
-- operador NOT: ! -> usado para inverter o valor booleano do que acompanha

- Operadores de conversão (cast)
-- quero que uma expressão retorne um inteiro uso (int) antes da expressão
-- para usar o cast basta apenas colocar entre parênteses o tipo de dado que quer que retorne EX: (int), (float), (string)...

- Operadores de atribuição
-- = que é o mais conhecido que atribui um valor para uma variável
-- += faz o valor da variável mais outro valor colocado
-- -= faz o valor da variável menos outro valor colocado
-- *= faz o valor da variável vezes outro valor colocado
-- /= faz o valor da variável dividio por outro valor colocado
-- %= faz o resto do valor da variável pelo valor colocado

- Operador ternário
-- como se fosse um if/else mais simplificado
-- comparação ? true : false
-- o dois pontos é opcional