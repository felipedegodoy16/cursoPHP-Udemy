o PHP é dividido em duas vertentes:
- Programação Backend: criação de sites dinêmicos, conexão e interação com banco de dados, geração de gráficos, documentos de XML e PDF
- Scripts de linha de comando: rodar scripts para que ações sejam executadas no computador ou remotamente, administração de sistema ou até mesmo CRONs (rotinas que rodam em paralelo sem precisar que nós executemos)

- É uma linguagem de programação que foi desenvolvida para deixar o HTML dinâmico
- Linguagem de script e open source
- Foco em desenvolvimento web
- Seus programas são executadas em server side (backend)
- PHP significa: Personal Home Page (P) e Hypertext Preprocessor (HP)

o PHP interpreta todo o bloco de código que estiver entre as tags de PHP
- a abertura é <?php
- e o fechamento é ?>
- cada linha de código termina com ;
- todo o código dentro destas tags será executado pelo PHP, e após isso será impresso na tela

//////////////////////////////////////////////////////////////////////////////////////////////////

Funções que vem com o PHP
- phpinfo() -> mostra as dependências do PHP que estão instaladas na máquina, mostra basicamente todas as informações sobre o PHP
- is_int() -> verificar se o dado é do tipo inteiro, o retorno é um booleano
- is_float() -> verificar se o dado é do tipo float, o retorno é um booleano
- is_string() -> verificar se o dado é do tipo string, o retorno é um booleano
- is_bool() -> verificar se o dado é do tipo booleano, o retorno é um booleano
- is_null() -> verificar se o dado é NULL, o retorno é um booleano
- gettype() -> retorna o tipo de dado de algo
- array_push() -> inserir elemento dentro de um array, (array, elemento)
- implode() -> passado dois parâmetros que você pode utilizar para criar uma string com um array, ("parametro que quer juntar ao array", $array) EX: implode(", ", $arr) -> Teste, Opa, Legal
- func_get_arg -> retorna uma lista com os argumentos de uma função
- func_num_args -> retorna o número de argumentos de uma função
- strlen() -> conta o número de caracteresda string passada por parâmetro
- strtoupper() -> transforma o que for passado como parâmetro para letras maiúsculas
- strtolower() -> transforma o que for passado como parâmetro para letras maiúsculas
- strpos() -> passado dois parâmetros, uma string e p que quero achar dentro daquela string ('felipe', 'ei') dentro da string felipe quero achar as letras 'e' e 'i'
- var_dump() e print_r() -> funções depuradoras, as duas apresentam os dados de forma semelhante, porém o var_dump() exibe de uma forma 'human_readable', da mais informações, desenvolvedores preferem ele por isso

//////////////////////////////////////////////////////////////////////////////////////////////////

PHP é case sensitive para variáveis, mas, para instruções não
- echo = ECHO
- $nome != $NOME

- espaço em branco no PHP é ignorado

//////////////////////////////////////////////////////////////////////////////////////////////////

Palavras reservadas
- Exemplos: echo, insteadof, else, interface, protected, require, and, public, __DIR__, __FILE__, endif, print, private, namespace, pow, as, break, case, for, finally, switch, throw...

//////////////////////////////////////////////////////////////////////////////////////////////////

Tipos de dados

- Inteiros
-- são os números que não possuem vírgula
-- podem ser negativos também
-- para validar se um número é inteiro usamos a função is_int()

- Float
-- são os números que possuem vírgula
-- podem ser negativos também
-- para validar se é um float usamos a função is_float()

- String
-- é possível escrever textos com aspas simples ou duplas
-- as aspas duplas interpretam variáveis as simples não
-- para validar se é uma string usamos a função is_string()
-- uma string dentro do PHP é vista como um array, para percorrer cada uma das letras dela basta usar a 'variável[contador]'
-- se quiser encontrar alguma letra específica basta usar strpos() -> passado dois parâmetros, uma string e o que quero achar dentro daquela string ('felipe', 'ei') dentro da string felipe quero achar a string 'ei', não retornará nada, mas se quiser achar a string 'el' retornará 1
-- para fazer a contagem de letras de uma string utilizar sempre a função 'strlen()'
- strtoupper() -> transforma o que for passado como parâmetro para letras maiúsculas
- strtolower() -> transforma o que for passado como parâmetro para letras maiúsculas

- Boolean
-- é um tipo de dado que possui dois valores (true or false)
-- alguns valores são considerados falsos: 0, 0.0, "0", [], NULL
-- booleano é usado para fazer validações
-- para verificar se é um booleano é usado a função is_bool()

- Array
-- serve para agrupar um conjunto de valores
-- é possível inserir qualquer tipo de dado dentro do array
-- é definido com os valores dentro de colchetes [] e seus dados separdos por vígula , EX: [1, 2, 3, 4]
-- todos os valores de um array possuem um índice, começando sempre do 0

- Array Associativo
-- é basicamente um array que possui uma chave e um valor
-- a estrutura é igual mas será construído dessa maneira: $arr = ['nome' => 'Felipe', 'idade' => 19] chave entre aspas, seta para apontar o valor e o valor

- Objetos
-- no PHP é possível criar classes e objetos
-- o objeto possui métodos que são suas ações e propriedades que são suas características

- NULL
-- esse tipo de dado tem apenas um valor, NULL
-- um uso para esse tipo de dado é verificar se uma variável está ou não vazia
-- podemos verificar se um valor é NULL com a função is_null()

//////////////////////////////////////////////////////////////////////////////////////////////////

Variáveis
- salvar um valor na memória
- em PHP as variáveis começam com $
- variáveis de variáveis, usando $$ você cria uma variável a partir de outra com o nome do valor dessa variável
- variável por referência "ponteiro" utiliza o símbolo =& se alterar o valor da uma altera o valor da outra também

------------------------------------

- Escopo da Variável

-- local: variável declarada em uma função
--- seu escopo é definido dentro da função
--- não é acessível fora da mesma
--- o seu valor é sempre resetado quando a função é finalizada 
--- cada função poderá mexer com a mesma variável, porém, seu escopo será dentro da função, ou seja, quando a função acabar a variável voltará para seu valor global

-- global: variáveos declaradas fora de funções
--- é declarada fora de funções
--- não são acessíveis dentro de funções
--- é necessário utilizar a palavra global para conseguir utilizar a variável dentro de outra função, porém, utilizando dessa forma, se o valor for alterado localmente ele será alterado globalmente também, essa instrução global deve ser usada dentro da função que quero utilizar a variável

-- static: variável declarada dentro da função, porém o seu valor permanece salvo entre chamadas da função
--- declarada com a instrução static
--- o valor da mesma é mantido e alterado a cada execução de uma função
--- é interessante esse comportamente pois as variáveis de escopo local sempre são resetadas, mas nesse caso não, nesse caso o valor persiste

-- parâmetros da função: variáveis passadas para uma função, podendo ser utilizadas ao da mesma
--- este recurso ajuda a criar funções com valores dinâmicos, podendo ser alterado a cada vez que a função é chamada
--- é possível passar mais de um parâmetro para a função

//////////////////////////////////////////////////////////////////////////////////////////////////

Expressões e Operadores
- o PHP em certas operações muda o tipo de dado de uma variável
- soma: +
- subtração: -
- divisão: /
- multiplicação: *
- por exemplo 5/2 = 2.5 (gera um float)
- 5 . 5 resulta em 55 (gera uma string, o . é para concatenação)
- sempre tomar cuidado com as expressões, pois, às vezes podem gerar resultados indesejados
- este recurso é chamado de auto cast (mudar de forma implícita o tipo da variável)
- % usado para retornar o resto de uma divisão
- ** operador de exponenciação
- . operador de concatenação
- ++ auto incremento e -- auto decremento

- Operadores de comparação
-- igualdade: == -> apenas valor é levado em consideração
-- idêntico a: === -> tipo também é levado em consideração
-- diferença: != -> apenas valor é levado em consideração
-- não idêntico a: !== -> tipo também é levado em consideração
-- maior e maior ou igual a: > e >=
-- menor e menor ou igual a: < e <=

- Operadores lógicos
-- operador AND: && -> verdade quando os dois lados forem verdadeiros
-- operador OR: || -> verdade quando pelo menos um dos lados forem verdadeiros (barra vertical ou pipe)
-- operador NOT: ! -> usado para inverter o valor booleano do que acompanha

- Operadores de conversão (cast)
-- quero que uma expressão retorne um inteiro uso (int) antes da expressão
-- para usar o cast basta apenas colocar entre parênteses o tipo de dado que quer que retorne EX: (int), (float), (string)...

- Operadores de atribuição
-- = que é o mais conhecido que atribui um valor para uma variável
-- += faz o valor da variável mais outro valor colocado
-- -= faz o valor da variável menos outro valor colocado
-- *= faz o valor da variável vezes outro valor colocado
-- /= faz o valor da variável dividio por outro valor colocado
-- %= faz o resto do valor da variável pelo valor colocado

- Operador ternário
-- como se fosse um if/else mais simplificado
-- comparação ? true : false
-- o dois pontos é opcional

//////////////////////////////////////////////////////////////////////////////////////////////////

Estruturas de controle 
- if -> tem uma condição se verdadeira ele executa o código que estiver no bloco de códigos da estrutura
- else if -> é igual um if, mas, com uma nova condição caso a primeira não seja verdadeira
- else -> não possui condição, executa se nenhuma condição for verdadeira
- pode haver um if dentro de outro

- switch -> bem parecida com o if, porém não há a pssibilidade de comparações, é comparada a um valor fixo
- case -> são os valores que serão comparados pela variável pega pelo switch
- break -> break é usado para parar um case e para sair do switch, se não colocar há a possibilidade de ele entrar em todos os cases 
- default -> é como se fosse um else, se nenhum case for atendido ele executa o default

//////////////////////////////////////////////////////////////////////////////////////////////////

Estruturas de repetição
- while -> enquanto uma condição for verdadeira ele repetirá isso, é necessário sempre alterar a variável que está sendo comparada para ter um stop do loop

- do while -> ele executa uma vez pelo menos o código antes de fazer a comparação para sair do loop

- for -> contador, condição e incremento/decremento todos na mesma linha, mais organizado e mais utilizado

- foreach -> funciona somente com um array, se repete para cada item de um array

- break -> usado para quebrar o loop antes de seu fim, para isso fazer uma condição que queira para quebrar sua repetição
- continue -> pula a execução de um loop, ou seja, ele pula e vai pra próxima repetição do loop
- pode haver um loop dentro de outro

//////////////////////////////////////////////////////////////////////////////////////////////////

Inlude
- com o include inserimos um arquivo PHP ou até um HTML
- pode ser usado tudo que está declarado no arquivo incluído
- o include não gera erro fatal se o arquivo não existir, ou seja, não prejudica a execução scrypt, continua executando mesmo assim, gera apenas um warning e esse warning pode ser ocultado
- include_once é a mesma coisa porém impede que você faça o include do mesmo arquivo mais de uma vez - mais recomendado

Require
- com o require inserimos um arquivo PHP ou até HTML
- pode ser usado tudo que está declarado no arquivo incluído
- o require gera erro fatal, então se o arquivo não existir o scrypt irá parar
- require_once é a mesma coisa porém impede que você faça o require do mesmo arquivo mais de uma vez - mais recomendado

- include_once e require_once se entendem então mesmo que faça o include_once de um arquivo e depois tente usar o require nesse mesmo arquivo ele não irá permitir

* Para voltar um diretório é bom sempre colocar dessa maneira "include __DIR__ . '/../caminho_para_o_arquivo'", require é a mesma coisa

//////////////////////////////////////////////////////////////////////////////////////////////////

Short tags
- <? código ?> -> tem alguns servidores que não suportam
- não é bom usar, apenas saber que existe

//////////////////////////////////////////////////////////////////////////////////////////////////

Exibição de conteúdo
- <?= "teste" ?> -> usado para exibir um conteúdo na tela, é um echo encurtado, para exibições rápidas, não aceita códigos dentro

//////////////////////////////////////////////////////////////////////////////////////////////////

Inserindo PHP ao HTML
- uma das principais funcionalidades do PHP
- é possível inserir códigos dinâmicos entre as tags
- esse tipo de arquivo pode ser tanto .php quanto .phtml (.phtml pode dar conflito em alguns servidores, melhor usar .php mesmo)

//////////////////////////////////////////////////////////////////////////////////////////////////

Funções
- são blocos de códigos que possuem nomes
- realizam alguma ação e podem ser reaproveitadas durante o código
- é possível passar parâmetros para funções, que moldam a execução
- reduz a duplicidade
- melhora a manutenção do código
- o PHP possui diversas funções prontas, que podemos utilizar
- parâmetro são como variáveis, utilizados dentro da função, para moldar a execução
- não há limite de parâmetros
- se passar menos argumentos do que uma função aceita gera um fatal error, se passar mais argumentos do que uma função aceita ele ignora os argumentos que não forem utilizados, utilizará sempre na ordem que for passado meu parêmetro
- para invocar a função, utilizar seu nome no código, dessa forma já estará invocando a função+
- normalmente as funções utilizam a instrução 'return' para retornar algo para onde ela foi chamada
- funções tem escopo local, porém, se usarmos a instrução global em uma variável global mas dentro da função conseguimos também usar seu valor e alterá-lo, assim como temos a instrução static, que serve para manter o valor da variável depois que a função termina já que quando não usamos isso a variável é resetada ao final da função
- é possível passar parâmetros que já possuem um valor pré-definido, ou seja, caso não haja uma passagem de valor esse valor default é atribuído
- a função será executada normalmente com o valor definido EX: function teste($a = "padrão")
- se a função tiver mais de um parâmetro e um deles for obrigatório e o outro tiver um valor default pe interessante sempre colocar o default por último, já que se colocar ele antes de um parâmetro obrigatório ele acaba se tornando um parâmetro obrigatório também
- func_get_arg -> retorna uma lista com os argumentos de uma função -> basta apenas colocar ela dentro da função que ela já pega a lista de argumentos que estão sendo passados, não precisa de parâmetros dentro dela
- func_num_args -> retorna o número de argumentos de uma função -> basta apenas colocar ela dentro da função que ela já pega o número de argumentos que estão sendo passados, não precisa de parâmetros dentro dela
- uma função pode também retornar uma lista de valores, não apenas um valor específico e aí acessar os índices de cada elemento da lista